---
# Playbook to deploy Pulp software repository on target host/group.
#
# Use Podman to deploy and run the "Pulp in One Container" container image
# under the identify of the current user on the localhost.
#
# Dependencies:
#   collections:
#     - ansible.posix
#     - containers.podman
#

- name: Preparations for running Pulp in a rootless container using Podman
  hosts: pulp
  become: true
  vars:
    # User to ensure on the system. Used to run the container in rootless mode.
    pulp_system_user: pulp
    # SSH public key to place in ~/.ssh/authorized_keys file of pulp_system_user user
    pulp_system_user_authorized_key: >
      ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIHrrpBfzdeZNzY2hxPi9KEBx8bZAROkA8HAAcoE5SK2I

  tasks:
    - name: Podman should be present
      ansible.builtin.package:
        name: podman
        state: present

    - name: Ensure system user account
      ansible.builtin.user:
        name: "{{ pulp_system_user | default('pulp') }}"
        password: "!"
        state: present

    - name: SSH authorized key for user account
      ansible.posix.authorized_key:
        user: "{{ pulp_system_user }}"
        state: present
        key: "{{ pulp_system_user_authorized_key }}"

    - name: Verify whether user is allowed to linger
      ansible.builtin.stat:
        path: "/var/lib/systemd/linger/{{ pulp_system_user }}"
      register: user_lingering

    - name: Enable lingering for user account
      ansible.builtin.command:
        cmd: "loginctl enable-linger {{ pulp_system_user | quote }}"
      changed_when: true
      when: not user_lingering.stat.exists


- name: Ensure Pulp in One Container container
  hosts: pulp
  remote_user: "{{ pulp_system_user | default('pulp') }}"
  vars:
    # Generic configuration for the containers
    podman_log_driver: 'journald'
    timezone: 'Europe/Amsterdam'

    # Version of Pulp, or actually container tag, to install
    pulp_version_tag: 3.43.1

    # Pulp config (settings.py): https://docs.pulpproject.org/pulpcore/configuration/settings.html
    # Contents of variable pulp_settings are processed by Jinja2 and put in the setting.py file
    # after without checking syntax. Ensure you use correct syntax otherwise Pulp will be unhappy!
    pulp_settings: |
      CONTENT_ORIGIN = 'http://{{ inventory_hostname }}:8080'
      ALLOWED_CONTENT_CHECKSUMS = ["md5", "sha1", "sha256"]
      ANSIBLE_API_HOSTNAME = 'http://{{ inventory_hostname }}:8080'
      ANSIBLE_CONTENT_HOSTNAME = 'http://{{ inventory_hostname }}:8080/pulp/content'
      CACHE_ENABLED = True

    # Configuration for pulp administrative user account
    pulp_admin_password: 'secret'

  tasks:
    - name: Ensure directories to preserve Pulp state are present
      ansible.builtin.file:
        path: "{{ item.dir }}"
        state: directory
        mode: "{{ item.mode | default('0755') }}"
      loop:
        - dir: "{{ ansible_facts.user_dir }}/pulp"
        - dir: "{{ ansible_facts.user_dir }}/pulp/containers"
        - dir: "{{ ansible_facts.user_dir }}/pulp/pgsql"
          mode: '0750'
        - dir: "{{ ansible_facts.user_dir }}/pulp/pulp_storage/tmp"
        - dir: "{{ ansible_facts.user_dir }}/pulp/settings/certs"

    - name: Write settings file
      ansible.builtin.copy:
        content: "{{ pulp_settings }}"
        dest: "{{ ansible_facts.user_dir }}/pulp/settings/settings.py"
        mode: '0644'

    - name: Acquire container images
      containers.podman.podman_image:
        name: "{{ item.image }}"
        username: "{{ item.user | default(omit) }}"
        password: "{{ item.password | default(omit) }}"
        state: present
#      environment:
#        http_proxy:
#        https_proxy:
#        no_proxy:
      loop:
        - image: "docker.io/pulp/pulp:{{ pulp_version_tag | default('stable') }}"
      loop_control:
        label: "{{ item.image }}"

    - name: Ensure Pulp container
      containers.podman.podman_container:
        name: pulp
        image: "docker.io/pulp/pulp:{{ pulp_version_tag | default('stable') }}"
        state: created
        rm: true
        log_driver: "{{ podman_log_driver | default(omit) }}"
        timezone: "{{ timezone | default(ansible_facts.date_time.tz) }}"
        env:
          TZ: "{{ timezone | default(ansible_facts.date_time.tz) }}"
#          http_proxy:
#          https_proxy:
#          no_proxy:
        publish:
          - 8080:80
        device:
          - /dev/fuse
        volume:
          - "{{ ansible_facts.user_dir }}/pulp/containers:/var/lib/containers:Z"
          - "{{ ansible_facts.user_dir }}/pulp/pgsql:/var/lib/pgsql:Z"
          - "{{ ansible_facts.user_dir }}/pulp/pulp_storage:/var/lib/pulp:Z"
          - "{{ ansible_facts.user_dir }}/pulp/settings:/etc/pulp:Z"
      register: podman_result
      notify:
        - Restart Pulp

    - name: Generate systemd unit file for Pulp container
      containers.podman.podman_generate_systemd:
        dest: "{{ ansible_facts.user_dir }}/.config/systemd/user/"
        name: "{{ podman_result.container.Name }}"
        new: true
        no_header: true
        restart_sec: 30
        restart_policy: "always"
        stop_timeout: 30
      notify:
        - Restart Pulp

    - name: Ensure Pulp is started and enabled
      ansible.builtin.systemd:
        name: "container-{{ podman_result.container.Name }}.service"
        state: started
        scope: user
        daemon_reload: true
        enabled: true

    - name: Pause until Pulp API is reachable
      ansible.builtin.uri:
        url: "http://localhost:8080/pulp/api/v3/status/"
        follow_redirects: none
        method: GET
      register: uri_result
      until: uri_result.status == 200
      retries: 18  # 180 seconds == 3 minutes of retry time.
      delay: 10
      check_mode: false  # always run, this is just a query.

    - name: Check password of Pulp admin user
      ansible.builtin.uri:
        url: "http://localhost:8080/pulp/api/v3/groups/"
        force_basic_auth: true
        url_username: "admin"
        url_password: "{{ pulp_admin_password }}"
        follow_redirects: none
        method: GET
        status_code: [200, 401]
      register: pulp_admin_login
      check_mode: false  # always run, this is just a query.

    - name: Set password for Pulp admin user
      ansible.builtin.command:
        cmd: |
          podman exec -it {{ podman_result.container.Name }}
          bash -c 'pulpcore-manager reset-admin-password --password {{ pulp_admin_password }}'
      changed_when: true
      no_log: true
      when: pulp_admin_login.status == 401

  handlers:
    - name: Restart Pulp
      ansible.builtin.systemd:
        name: "container-{{ podman_result.container.Name }}.service"
        state: restarted
        scope: user
